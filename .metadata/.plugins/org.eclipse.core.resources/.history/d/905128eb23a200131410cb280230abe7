package examTimetable;

import java.util.*;

public class ExamTimetable {
	private List<Module> modules = new ArrayList<Module>();
	private List<Rooms> rooms = new ArrayList<Rooms>();
	private List<Module> scheduledModules = new ArrayList<Module>();
	private List<Rooms> scheduledRooms = new ArrayList<Rooms>();
	//private List<Day> availableTime = new ArrayList<Day>();
	private final int EXAM_LENGTH;

	public ExamTimetable(int EXAM_LENGTH, List<Module> modules, List<Rooms> rooms) {
		this.EXAM_LENGTH = EXAM_LENGTH;
		this.modules = modules;
		this.rooms = rooms;
	}

	/**
	 * get all the modules which have been scheduled.
	 * 
	 * @return List<Module>
	 */
	public List<Module> getScheduledModules() {
		return scheduledModules;
	}

	/**
	 * get all rooms which have been booked.
	 * 
	 * @return List<Room>
	 */
	public List<Rooms> getScheduledRooms() {
		return scheduledRooms;
	}

	/**
	 * check to see if all the Exams have been booked.
	 * 
	 * @param List
	 *            <Module> modules
	 * @return Boolean
	 */
	private Boolean allBooked(List<Module> modules) {
		for (Module m : modules)
			if (m.getExam().isBooked()) {
				if (allBooked(modules)) {
					return true;
				}
			}
		return false;
	}

	/**
	 * 
	 * @param List
	 *            <Module> modules
	 * @return Boolean
	 */
	private Boolean allTimeUsed(List<Module> modules) {
		int proposedDuration = 0;
		for (Module m : modules) {
			proposedDuration += m.getExam().getDuration();
		}
		int totalDuration = 0;
		for (Rooms r : scheduledRooms) {
			Iterator<Day> allDays = r.availableDays();
			while (allDays.hasNext()) {
				Day d = allDays.next();
				totalDuration += d.getFreeTime();
			}
		}
		if (totalDuration == proposedDuration)
			return true;
		else
			return false;
	}

	public Boolean schedule() {
		if (allBooked(modules)) {
			return true;
		} else if (allTimeUsed(modules))
			return false;
		else {
			
			
			/**
			 * Refactor scheduling so after Module it runs to room.  From room we can tell whether the
			 * day/hour is free.  Therefore less nested statements should be needed in the actual scheduling
			 * method.  The algorhtim should run - Module, Room - check availability - book or move on.
			 */
			
			
			for (Iterator<Module> modList = modules.iterator(); modList.hasNext();) {
				Module  m = modList.next();
				Exam e = m.getExam();
				for (Iterator<Rooms> roomList = rooms.iterator() ; roomList.hasNext();) {
					Rooms r = roomList.next();
					for (Iterator<Day> dayList = r.availableDays(); roomList.hasNext();) {
						Day d = dayList.next();
					if(r.isAvailable(e.getDuration(), d)) {
						if (!e.isBooked()) {
							if (e.hasRelatedExam()) {
								Exam rE = e.getRelatedExam();
								if (rE.isBooked()) 
								{
								return false;
								} 
								else 
								{
								if (r.getCapacity() <= m.getStudentsEnrolled().size()) 
									{
									if (r.getType() == e.getRoomType()) 
												{
													int studentSize = 0;
													for (Iterator<Student> studentList = m.getStudentsEnrolled().iterator(); studentList.hasNext();) {
														Student s = studentList.next();
														if (!s.hasExam(d.getFirstHour(), d)) 
														{
															studentSize++;
														}
														if (studentSize == m.getStudentsEnrolled().size())
														{
															e.setExam(r, e.getDuration());
															r.bookRoom(e, d);
															modList.remove();
															scheduledModules.add(m);
															if(schedule()){
															return true;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		return false;
			}
	}
