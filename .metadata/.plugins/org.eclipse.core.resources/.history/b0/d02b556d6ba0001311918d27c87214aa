package examTimetable;

import java.util.*;

public class Days implements Day {
	private final Hour[] hours = new Hour[]{Hour.A,Hour.B,Hour.C,Hour.D,Hour.E,Hour.F,Hour.G};
	
	@Override
	public int getFreeTime() {
		int freeTime = 0;
		for(Hours h: hours) {
			if(h.isBooked() == false) {
				freeTime++;
			}
		}
		return freeTime;
	}

	@Override
	public int getFirstAvailableTime() {
		for(Hour h: hours) {	
		switch(h){
				 case A: return 9;
				 case B: return 10;
				 case C: return 11;
				 case D: return 12;
				 case E: return 13;
				 case F: return 14;
				 case G: return 15;
				 case H: return 16;
				 default: return -1;
		}
	}
		return -1;
	}

	@Override
	public List<Hours> getAvailableHours() {
		List <Hours> availableHours = new ArrayList<Hours>();
		for(Hours h: hours) {
			if(h.isBooked() == false) {
				availableHours.add(h);
			}
		}
		return availableHours;
	}

	@Override
	public Hours getFirstHour() {
		for(Hours h: hours) {
			if(h.isBooked()) {
				return h;
			}
		}
		//day is full
		return null;
	}

	@Override
	public List<Hours> getAllHours() {
		return Arrays.asList(hours);
	}

	@Override
	public Boolean containsFreeSpace() {
		for(Hours h: hours) {
			if(h.isBooked()) {
				return true;
			}
		}
		//day is full
		return false;
	}

	@Override
	public void setHourBooked(Hours hour) {
		hour.book();
	}

}
