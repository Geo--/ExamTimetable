package examTimetable;

import java.util.*;

public class ExamTimetable {
	private List<Module> modules = new LinkedList<Module>();
	private List<Rooms> rooms = new LinkedList<Rooms>();
	//private List<Module> scheduledModules = new LinkedList<Module>();

	public ExamTimetable (List<Module> modules,
			List<Rooms> rooms) {
		this.modules = modules;
		this.rooms = rooms;
	}

	/**
	 * get all the modules which have been scheduled.
	 * 
	 * @return List<Module>
	 *//*
	public List<Module> getScheduledModules() {
		return scheduledModules;
	}*/

	/**
	 * check to see if all the Exams have been booked.
	 * 
	 * @param List
	 *            <Module> modules
	 * @return Boolean
	 */ /*
	private Boolean allBooked(List<Module> modules) {
		for (Module m: modules) {
			if (m.getExam().isBooked()) {
				if (allBooked(modules)) {
					return true;
				}
			
			}
		}
		return false;
	} */

	public Boolean schedule() {
			for (Iterator<Module> modIT = modules.iterator() ; modIT.hasNext() ;) {
				Module m = modIT.next();
				Exam e = m.getExam();
				if(e.isBooked() ==true) {
					return false;
				}
				//Insert a check for the exam having a related exam
				//If scheduled, store the time as a variable and check
				//the room below is free that time.  If not, go next room.
				//if no room is available return fail.
					for (Rooms room: rooms) {
						List<Day> dayList = room.availableDays();
					for (Day d : dayList) {
						if (room.isAvailable(e.getDuration(), d)) {
							if (room.getCapacity() >= m.numberofstudents()) {
								if (room.getType() == e.getRoomType()) {
									//Insert checks for the student if they're
									//already sitting an exam in this time.
								e.setExam(room);
								room.bookRoom(e, d);
								if (schedule()) {
									return true;
								}
											}
										}
									}
								}
					break;
					}
			}
			return false;
	}
	
	public String toString() {
		String m = "";
		for(Module mod: modules) {
			m += mod + "/n";
		}
		return m;
	}
}
